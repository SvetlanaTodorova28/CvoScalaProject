// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scala.StockSimulation.Web.Data;

#nullable disable

namespace Scala.StockSimulation.Web.Migrations
{
    [DbContext(typeof(ScalaStockSimulationDbContext))]
    [Migration("20240614175122_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscountsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("DiscountProduct");

                    b.HasData(
                        new
                        {
                            DiscountsId = new Guid("00000000-0000-0000-0000-000000000025"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            DiscountsId = new Guid("00000000-0000-0000-0000-000000000026"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            DiscountsId = new Guid("00000000-0000-0000-0000-000000000028"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            DiscountsId = new Guid("00000000-0000-0000-0000-000000000025"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000005")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "114b6852-47fe-4f5b-bd79-f80bee1f6c9b",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "f4e9af34-9831-448c-9347-136357e60089",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000018"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000019"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000020"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000021"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000022"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000023"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34c12c71-1195-471a-9d2e-f7eddbc071be",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(379),
                            Email = "johnny.debeer@school.be",
                            EmailConfirmed = true,
                            FirstName = "Johnny",
                            IsTeacher = true,
                            LastName = "De Beer",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNNY.DEBEER@SCHOOL.BE",
                            NormalizedUserName = "JOHNNY.DEBEER@SCHOOL.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEHAbyoeWpq9kWoYzcM09MVAQxL+kq6wpZYhzhVQWvElewyWLocfWXoLWtpTMxBF6ig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a30f8fb-4f61-4124-90ae-53687dd31f3a",
                            TwoFactorEnabled = false,
                            UserName = "johnny.debeer@school.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "881f5c3e-4a76-4278-8822-991214ab584c",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(384),
                            Email = "mileetoo.dimarko@school.be",
                            EmailConfirmed = true,
                            FirstName = "Mileetoo",
                            IsTeacher = true,
                            LastName = "Die Marko",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILEETOO.DIMARKO@SCHOOL.BE",
                            NormalizedUserName = "MILEETOO.DIMARKO@SCHOOL.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGuGHcLJHjr0wFmvBHAxKQAdMEhMHGze0h5OAE1oVOxeOrHpPIKS3YQgCea7g1xsTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c54419c8-b54a-4214-9778-6c4370404d4d",
                            TwoFactorEnabled = false,
                            UserName = "mileetoo.dimarko@school.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fdc9e0c-4f07-4921-a34a-d85832e31341",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(403),
                            Email = "tibo.verkest@student.be",
                            EmailConfirmed = true,
                            FirstName = "Tibo",
                            IsTeacher = false,
                            LastName = "Verkest",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIBO.VERKEST@STUDENT.BE",
                            NormalizedUserName = "TIBO.VERKEST@STUDENT.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEHeXdcgIKK2hFv65OvdYsgnusgF2uOMAMTK+OEojRNxnIepEhAmyC6nBB2eHEOxAvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8dd3721c-dd67-46af-98e8-f1a9185a49b4",
                            TwoFactorEnabled = false,
                            UserName = "tibo.verkest@student.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7215d60a-93dc-496e-ab6b-ad1adc98ec3e",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(409),
                            Email = "mathias.breda@student.be",
                            EmailConfirmed = true,
                            FirstName = "Mathias",
                            IsTeacher = false,
                            LastName = "Breda",
                            LockoutEnabled = false,
                            NormalizedEmail = "MATHIAS.BREDA@STUDENT.BE",
                            NormalizedUserName = "MATHIAS.BREDA@STUDENT.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAECI1NL1cSEqrD3LqGZ7ZYxHn8w86VVh8DDrW5xHrhxItCWD4uASQiC6KCEiUeyWxrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93d375a6-cc07-4a0a-b1d5-20263427a57c",
                            TwoFactorEnabled = false,
                            UserName = "mathias.breda@student.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9e108b3-4605-4605-8197-6499ef4d14ae",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(415),
                            Email = "kenny.demulder@student.be",
                            EmailConfirmed = true,
                            FirstName = "Kenny",
                            IsTeacher = false,
                            LastName = "De Mulder",
                            LockoutEnabled = false,
                            NormalizedEmail = "KENNY.DEMULDER@STUDENT.BE",
                            NormalizedUserName = "KENNY.DEMULDER@STUDENT.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEEeMoLpeBb/Pl8E0ZcWtadhKxd8HLowt1BAHo8sbNm4MQKpLTEmMNPob/PKy5PzfGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "327f5b2d-8e87-499e-8e34-b2cc10f325cd",
                            TwoFactorEnabled = false,
                            UserName = "kenny.demulder@student.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bff6a3f-f93d-4ad5-b51b-6dea20ff44bc",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(420),
                            Email = "joeri.versyck@student.be",
                            EmailConfirmed = true,
                            FirstName = "Joeri",
                            IsTeacher = false,
                            LastName = "Versyck",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOERI.VERSYCK@STUDENT.BE",
                            NormalizedUserName = "JOERI.VERSYCK@STUDENT.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+MHYP0M3eiUQeZPWfWR92KXERErWn7/kzh+zRTxMtNAA8pRRR4woGQG+faQa2Oqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "889e52c4-8f78-420a-99a7-1af8aa53e26c",
                            TwoFactorEnabled = false,
                            UserName = "joeri.versyck@student.be"
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            IsActive = false,
                            Rate = 1.00m,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            IsActive = false,
                            Rate = 1.00m,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            IsActive = false,
                            Rate = 1.00m,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDelivered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(270),
                            Name = "Bestelling bij leverancier"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(272),
                            Name = "Bestelling voor klant"
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InitialMaximumStock")
                        .HasColumnType("int");

                    b.Property<int>("InitialMinimumStock")
                        .HasColumnType("int");

                    b.Property<int>("InitialStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<decimal>("PriceWithDiscounts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ArticleNumber = "1",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(229),
                            Description = "De nieuwe Madden NFL",
                            InitialMaximumStock = 175,
                            InitialMinimumStock = 20,
                            InitialStock = 50,
                            Name = "Madden NFL 24",
                            Price = 69.99m,
                            PriceWithDiscounts = 69.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ArticleNumber = "2",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(233),
                            Description = "De nieuwe Formula 1",
                            InitialMaximumStock = 200,
                            InitialMinimumStock = 25,
                            InitialStock = 75,
                            Name = "F1 23",
                            Price = 69.99m,
                            PriceWithDiscounts = 69.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ArticleNumber = "3",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(236),
                            Description = "De nieuwe FIFA",
                            InitialMaximumStock = 250,
                            InitialMinimumStock = 20,
                            InitialStock = 100,
                            Name = "EA Sports FC 24",
                            Price = 69.99m,
                            PriceWithDiscounts = 69.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            ArticleNumber = "4",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(238),
                            Description = "Het ultieme race spel",
                            InitialMaximumStock = 225,
                            InitialMinimumStock = 15,
                            InitialStock = 200,
                            Name = "Need For Speed Unbound",
                            Price = 69.99m,
                            PriceWithDiscounts = 69.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            ArticleNumber = "5",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(241),
                            Description = "Speel als een samoerai zoals nooit ervoor",
                            InitialMaximumStock = 150,
                            InitialMinimumStock = 15,
                            InitialStock = 30,
                            Name = "Sekiro: Shadows Die Twice",
                            Price = 49.99m,
                            PriceWithDiscounts = 49.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            ArticleNumber = "6",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(243),
                            Description = "Word de doder van demonen",
                            InitialMaximumStock = 190,
                            InitialMinimumStock = 25,
                            InitialStock = 65,
                            Name = "Demon's Souls",
                            Price = 39.99m,
                            PriceWithDiscounts = 39.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            ArticleNumber = "7",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(246),
                            Description = "Prepare to die",
                            InitialMaximumStock = 215,
                            InitialMinimumStock = 20,
                            InitialStock = 75,
                            Name = "Dark Souls: Remastered",
                            Price = 59.99m,
                            PriceWithDiscounts = 59.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            ArticleNumber = "8",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(251),
                            Description = "De eerste openwereldgame van FromSoftware",
                            InitialMaximumStock = 225,
                            InitialMinimumStock = 15,
                            InitialStock = 200,
                            Name = "Elden Ring",
                            Price = 69.99m,
                            PriceWithDiscounts = 69.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            ArticleNumber = "9",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(254),
                            Description = "Kom weer in contact met je verloren erfgoed, ontdek wat het betekent om Na'vi te zijn en werk samen met andere clans om Pandora te beschermen.",
                            InitialMaximumStock = 400,
                            InitialMinimumStock = 50,
                            InitialStock = 250,
                            Name = "Avatar: Frontiers of Pandora  Standard Edition",
                            Price = 69.99m,
                            PriceWithDiscounts = 69.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            ArticleNumber = "10",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(258),
                            Description = "Word een legendarische Viking op zoek naar glorie. Overval je vijanden, breid je settlement uit en bouw je politieke macht op.",
                            InitialMaximumStock = 225,
                            InitialMinimumStock = 15,
                            InitialStock = 200,
                            Name = "Assassin's Creed Valhalla  Standard Edition",
                            Price = 49.99m,
                            PriceWithDiscounts = 49.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            ArticleNumber = "11",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(261),
                            Description = "Een van de beste first-person shooters ooit gemaakt",
                            InitialMaximumStock = 225,
                            InitialMinimumStock = 15,
                            InitialStock = 200,
                            Name = "Tom Clancy's Rainbow Six Siege  Standard Edition",
                            Price = 19.99m,
                            PriceWithDiscounts = 19.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            ArticleNumber = "12",
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(264),
                            Description = "In Watch Dogs Legion vorm je in de nabije toekomst een verzet om Londen terug te winnen, voordat het ten onder gaat.",
                            InitialMaximumStock = 225,
                            InitialMinimumStock = 15,
                            InitialStock = 200,
                            Name = "Watch Dogs Legion  Deluxe Edition",
                            Price = 69.99m,
                            PriceWithDiscounts = 69.99m,
                            SupplierId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(150),
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(192),
                            Name = "FromSoftware"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Created = new DateTime(2024, 6, 14, 19, 51, 22, 504, DateTimeKind.Local).AddTicks(194),
                            Name = "Ubisoft"
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.UserProductState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("FictionalStock")
                        .HasColumnType("int");

                    b.Property<int>("MaximumStock")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhysicalStock")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReservedStock")
                        .HasColumnType("int");

                    b.Property<int>("SoonAvailableStock")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductStates");
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Order", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Order")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Product", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.UserProductState", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserProductState")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.Order", "Order")
                        .WithMany("UserProductStates")
                        .HasForeignKey("OrderId");

                    b.HasOne("Scala.StockSimulation.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("UserProductState");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("UserProductStates");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
